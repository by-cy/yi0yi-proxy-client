name: Release Desktop Apps

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v2.2.4)'
        required: true
        type: string
  push:
    tags:
      - 'v*'

permissions: write-all

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

concurrency:
  group: "${{ github.workflow }} - ${{ github.head_ref || github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  release-desktop:
    name: Release ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows 构建
          - platform: 'windows-x64'
            os: windows-latest
            target: x86_64-pc-windows-msvc
            
          - platform: 'windows-arm64'
            os: windows-latest
            target: aarch64-pc-windows-msvc
          
          # macOS 构建
          - platform: 'macos-apple-silicon'
            os: macos-latest
            target: aarch64-apple-darwin
            
          - platform: 'macos-intel'
            os: macos-latest
            target: x86_64-apple-darwin

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-all-crates: true
          cache-on-failure: true

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check target compatibility
        run: pnpm check ${{ matrix.target }}

      - name: Build Yi0Yi Proxy
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          # Tauri签名密钥（必需）
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          
          # Apple代码签名（macOS构建必需）
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        
        with:
          tagName: ${{ github.event.inputs.release_version || github.ref_name }}
          releaseName: "Yi0Yi Proxy ${{ github.event.inputs.release_version || github.ref_name }}"
          releaseBody: |
            ## 🚀 Yi0Yi Proxy ${{ github.event.inputs.release_version || github.ref_name }}
            
            ### 📦 下载说明
            - **Windows x64**: 下载 `*-x86_64-pc-windows-msvc-setup.exe`
            - **Windows ARM64**: 下载 `*-aarch64-pc-windows-msvc-setup.exe`
            - **macOS Apple Silicon**: 下载 `*-aarch64-apple-darwin.dmg`
            - **macOS Intel**: 下载 `*-x86_64-apple-darwin.dmg`
            
            ### 🔄 更新内容
            请查看完整的更新日志了解新功能和改进。
            
            ### ⚠️ 注意事项
            - 首次运行可能需要授予网络权限
            - macOS用户可能需要在"系统偏好设置 > 安全性与隐私"中允许应用运行
          
          tauriScript: pnpm
          args: --target ${{ matrix.target }}
          includeUpdaterJson: true

  # 创建通用版本（如果需要）
  create-universal-builds:
    name: Create Universal Builds
    runs-on: macos-latest
    needs: release-desktop
    if: success()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download macOS builds
        uses: actions/download-artifact@v4
        with:
          pattern: '*macos*'
          merge-multiple: true

      - name: Create macOS Universal Build
        run: |
          # 这里可以添加创建通用二进制文件的逻辑
          echo "可以在这里添加lipo命令来创建通用的macOS二进制文件"

  # 发布后处理
  post-release:
    name: Post Release Processing
    runs-on: ubuntu-latest
    needs: release-desktop
    if: success()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate updater metadata
        run: pnpm updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify completion
        run: |
          echo "✅ Yi0Yi Proxy ${{ github.event.inputs.release_version || github.ref_name }} 发布完成!"
          echo "📦 构建的平台: Windows (x64, ARM64), macOS (Intel, Apple Silicon)" 