---
name: Yi0Yi Proxy Release Build

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v2.2.4)'
        required: true
        type: string
  push:
    tags:
      - 'v*'

permissions: write-all

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

concurrency:
  # only allow per workflow per commit (and not pr) to run at a time
  group: "${{ github.workflow }} - ${{ github.head_ref || github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-all-crates: true
          cache-on-failure: true

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install and check
        run: |
          pnpm i
          pnpm check ${{ matrix.target }}

      # 验证构建环境配置
      - name: Verify Build Configuration
        run: |
          echo "🔍 Verifying Build Configuration..."
          echo "📦 Build Environment: CI"
          echo "✅ Production configuration confirmed"

      - name: Tauri build
        id: build
        uses: tauri-apps/tauri-action@v0
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          
          # Production Build Flag
          NODE_ENV: production
          VITE_CI: true
          
          # macOS APP 构建环境变量
          CI: true
          MACOS_CERTIFICATE: ""
          MACOS_CERTIFICATE_PWD: ""
          
          # Apple 签名配置已注释 - 避免签名错误，构建未签名版本
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          args: "--target ${{ matrix.target }} --verbose --bundles ${{ runner.os == 'Windows' && 'msi' || 'app' }}"
          tagName: ${{ github.event.inputs.release_version || github.ref_name }}
          releaseName: "Yi0Yi Proxy ${{ github.event.inputs.release_version || github.ref_name }}"
          # 允许覆盖已存在的release
          releaseId: ${{ github.event.inputs.release_version || github.ref_name }}
          allowOverwrite: true
          releaseBody: |
            ## 🚀 Yi0Yi Proxy ${{ github.event.inputs.release_version || github.ref_name }}
            
            ### 📦 下载说明
            **Windows 用户:**
            - **Windows x64**: 下载 `*-x86_64-pc-windows-msvc.msi` (安装包)
            - **Windows ARM64**: 下载 `*-aarch64-pc-windows-msvc.msi` (安装包)
            
            **macOS 用户:**
            - **macOS Apple Silicon**: 下载 `*-aarch64-apple-darwin.app` (应用包)
            - **macOS Intel**: 下载 `*-x86_64-apple-darwin.app` (应用包)
            
            ### ⚠️ 安装注意事项
            
            **Windows 用户:**
            - 下载 `.msi` 安装包后双击安装即可
            - 如果 Windows Defender 提示未知发布者，点击"更多信息"→"仍要运行"
            
            **macOS 用户:**
            由于应用未经 Apple 代码签名，首次运行时需要：
            1. 右键点击应用，选择"打开"
            2. 在弹出的对话框中点击"打开"
            3. 或在"系统偏好设置" > "安全性与隐私"中允许运行
            
            这是一次性操作，之后可以正常双击启动。
            
            ### 🔄 更新内容
            - 基于 Tauri 2 构建的现代化代理客户端
            - 支持多种代理协议和规则配置
            - 优化的用户界面和性能改进
            - 简化的身份验证系统
            
            ### 🛠️ 技术栈
            - **前端**: React + TypeScript + Material-UI
            - **后端**: Rust + Tauri 2
            - **认证**: 简化本地认证
            - **构建**: Vite + pnpm
          tauriScript: pnpm
          includeUpdaterJson: true

      # 验证构建后的配置
      - name: Verify Build Artifacts
        if: success()
        shell: bash
        run: |
          echo "🔍 Verifying build artifacts..."
          echo "✅ Build completed successfully"
          echo "📦 Environment: production"
          
          # 检查构建产物
          echo "🔍 Checking built files..."
          if [ -d "dist" ]; then
            echo "✅ Build artifacts found"
          else
            echo "⚠️ Build dist directory not found"
          fi

      # 列出构建产物（用于调试） - macOS
      - name: List build artifacts (macOS)
        if: success() && runner.os == 'macOS'
        run: |
          echo "=== macOS Build artifacts ==="
          find src-tauri/target/${{ matrix.target }}/release/bundle -type f -name "*.app" | head -10

      # 列出构建产物（用于调试） - Windows
      - name: List build artifacts (Windows)
        if: success() && runner.os == 'Windows'
        run: |
          echo "=== Windows Build artifacts ==="
          dir src-tauri\target\${{ matrix.target }}\release\bundle\msi\ || echo "No MSI files found"

      # 上传构建产物 - macOS
      - name: Upload build artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: yi0yi-proxy-macos-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*.app
          retention-days: 30
          if-no-files-found: warn

      # 上传构建产物 - Windows
      - name: Upload build artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: yi0yi-proxy-windows-${{ matrix.target }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*.msi
          retention-days: 30
          if-no-files-found: warn

  # 生成更新器文件
  release-updater:
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Pnpm install
        run: pnpm i

      - name: Release updater file
        run: pnpm updater
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
